{"version":3,"sources":["components/UsernamePicker.js","components/Reply.js","components/App.js","serviceWorker.js","index.js"],"names":["UsernamePicker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitForm","event","preventDefault","console","log","usernameChange","updateUsername","target","value","textUsername","React","createRef","_this2","react_default","a","createElement","onSubmit","type","name","onChange","passwordChange","Component","Reply","connectToFlask","socket","emit","username","updateMessage","message","io","on","data","JSON","stringify","password","onClick","App","setState","state","className","components_UsernamePicker","components_Reply","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRA4BeA,qBAzBX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIVQ,WAAa,SAACC,GACVA,EAAMC,iBACNC,QAAQC,IAAI,mBAPGX,EAUnBY,eAAiB,SAACJ,GACfR,EAAKD,MAAMc,eAAeL,EAAMM,OAAOC,QATtCf,EAAKgB,aAAeC,IAAMC,YAFXlB,wEAcV,IAAAmB,EAAAhB,KACL,OACIiB,EAAAC,EAAAC,cAAA,QAAMC,SAAUpB,KAAKI,YACjBa,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,KAAK,WAAWC,SAAU,SAAClB,GAAD,OAAWW,EAAKP,eAAeJ,MAC5EY,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,KAAK,WAAWC,SAAU,SAAClB,GAAD,OAAWW,EAAKQ,eAAenB,MAC5EY,EAAAC,EAAAC,cAAA,gCApBaL,IAAMW,6BCiCpBC,cA/BX,SAAAA,EAAY9B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,IACf7B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAvB,KAAAH,KAAMJ,KAUV+B,eAAiB,WACb9B,EAAK+B,OAAOC,KAAK,SAAUhC,EAAKD,MAAMkC,WAZvBjC,EAcnBkC,cAAgB,SAACC,GACbnC,EAAKD,MAAMmC,cAAcC,IAbzBnC,EAAK+B,OAASK,IAAG,yBAFFpC,mFAKC,IAAAmB,EAAAhB,KAChBA,KAAK4B,OAAOM,GAAG,YAAa,SAAAC,GACxBnB,EAAKe,cAAcK,KAAKC,UAAUF,uCAYtC,OACIlB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAKnB,KAAKJ,MAAMkC,SAAhB,IAA2B9B,KAAKJ,MAAM0C,UACtCrB,EAAAC,EAAAC,cAAA,UAAQoB,QAASvC,KAAK2B,gBAAtB,oBACAV,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,UAAKnB,KAAKJ,MAAMoC,iBA1BZlB,IAAMW,WC+BXe,cA5Bb,SAAAA,EAAY5C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,IACjB3C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,KAAMJ,KAMRc,eAAiB,SAACoB,GAChBjC,EAAK4C,SAAS,CAAEX,SAAUA,KAN1BjC,EAAK6C,MAAQ,CACXZ,SAAU,IAHKjC,wEAYjB,OACEoB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAACyB,EAAD,CACElC,eAAgBV,KAAKU,iBAEvBO,EAAAC,EAAAC,cAAC0B,EAAD,CACEd,cAAe/B,KAAK+B,cACpBC,QAAShC,KAAK0C,MAAMV,QACpBF,SAAU9B,KAAK0C,MAAMZ,SACrBQ,SAAUtC,KAAK0C,MAAMJ,mBAtBbb,aCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e7abbf90.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass UsernamePicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textUsername = React.createRef();\r\n      }\r\n    \r\n    submitForm = (event) => {\r\n        event.preventDefault();\r\n        console.log('Form Submitted');\r\n        \r\n    };\r\n    usernameChange = (event) => {\r\n       this.props.updateUsername(event.target.value); \r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitForm}>\r\n                <input type=\"text\" name=\"username\" onChange={(event) => this.usernameChange(event)} />\r\n                <input type=\"text\" name=\"password\" onChange={(event) => this.passwordChange(event)} />\r\n                <button>Submit</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UsernamePicker;","import React from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nclass Reply extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.socket = io('http://localhost:5000'); \r\n    }  \r\n \r\n    componentDidMount() {\r\n        this.socket.on('join_room', data => {\r\n            this.updateMessage(JSON.stringify(data));\r\n        })\r\n    }\r\n    \r\n    connectToFlask = () => {\r\n        this.socket.emit('create', this.props.username);\r\n    }     \r\n    updateMessage = (message) => {\r\n        this.props.updateMessage(message);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Form Values</h1>\r\n                <h2>{this.props.username} {this.props.password}</h2>\r\n                <button onClick={this.connectToFlask}>CONNECT TO FLASK</button>\r\n                <h1>Websocket Response</h1>\r\n                <h2>{this.props.message}</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Reply;","import React, { Component } from 'react';\nimport '../App.css';\nimport UsernamePicker from './UsernamePicker';\nimport Reply from './Reply';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      username: ''\n    };\n  }\n\n  updateUsername = (username) => {\n    this.setState({ username: username });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UsernamePicker\n          updateUsername={this.updateUsername}\n        />\n        <Reply\n          updateMessage={this.updateMessage}\n          message={this.state.message}\n          username={this.state.username}\n          password={this.state.password}\n         />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}