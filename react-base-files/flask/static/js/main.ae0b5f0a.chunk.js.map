{"version":3,"sources":["serviceWorker.js","components/UsernamePicker.js","components/Room/GameList.js","components/Room/ChatLog.js","components/Room/UserList.js","components/Room/Room.js","components/Games/Double07.js","components/Games/Hot_Potato.js","components/Games/Match.js","components/Games/Fragments.js","components/Games/MultiGame.js","components/NotFound.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","UsernamePicker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitUsername","event","preventDefault","socket","emit","username","usernameInput","current","value","socketId","id","state","React","createRef","_this2","on","data","updateGameList","games","updateUsername","updateSocketId","setState","history","push","react_default","a","createElement","className","onSubmit","type","name","placeholder","maxLength","required","ref","Component","GameList","sessionGames","gameList","length","sessionStorage","getItem","split","map","game","index","key","onClick","goToGame","ChatLog","sendMessage","chatInput","userChat","chatLog","item","concat","message","autoComplete","UserList","users","user","Room","onPageRefresh","setItem","JSON","stringify","afterPageRefresh","refreshed","console","log","removeAllListeners","userState","i","keys","tempUsers","temp","addEventListener","Room_GameList","Room_ChatLog","Room_UserList","Double07","sessionState","parse","choosePlayer","allTargets","action","target","showTargets","showSingleTarget","chooseAction","closeTargetList","player","targetList","hp","ap","returnValue","_this3","src","alt","disabled","aria-label","Hot_Potato","updateTimer","timer","endOfTurn","userTurn","potatoHolder","time","handImage","clearInterval","interval","explode","stage","document","getElementById","Hammer","next","setInterval","Match","findUnselectable","unselectableCards","disableSubmit","cursor","submitDirection","direction","selectCard","cardValue","board","cardSelected","flipCard","flip","hideBox","playersTurn","j","gameBoard","Fragments","selectPicture","fragmentChosen","selection","fragments","MultiGame","submitTap","tapCount","submitSimon","simonSequence","submitMaff","mathAnswer","Math","trunc","valid","playerHealth","activateButton","players","answer","readOnly","NotFound","App","io","BrowserRouter","Switch","Route","exact","path","render","components_UsernamePicker","assign","components_Room_Room","Games_Double07","Games_Hot_Potato","Games_Match","Games_Fragments","Games_MultiGame","component","ReactDOM","components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae0b5f0a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nclass UsernamePicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            socketId: ''    \r\n        }; \r\n        this.usernameInput = React.createRef();         \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.on('games', (data) => {\r\n            this.props.updateGameList(data.games);\r\n        });\r\n\r\n        this.props.socket.on('username', (data) => {\r\n            this.props.updateUsername(data);\r\n            this.props.updateSocketId(this.props.socket.id);\r\n            this.setState({\r\n                username: data,\r\n                socketId: this.props.socket.id\r\n            });\r\n\r\n            this.props.history.push(\"/room\");\r\n        });\r\n    }\r\n\r\n    // Submits user data to server and updates usernamePicker and app component state\r\n    submitUsername = (event) => {\r\n        event.preventDefault();\r\n        this.props.socket.emit('joinServer', {\r\n            username: this.usernameInput.current.value,\r\n            socketId: this.props.socket.id  \r\n        });\r\n        // Clear the username input field\r\n        this.usernameInput.current.value = '';\r\n    } \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                    <h1 className=\"landing title is-1 has-text-white\">UI Tester</h1>\r\n                    <h5 className=\"subtitle is-5 has-text-light\">Where dreams go to die</h5>\r\n                        <div className=\"columns is-centered\">\r\n                            <div className=\"column is-4\">\r\n                                <div className=\"box\">\r\n                                    <form onSubmit={this.submitUsername}>\r\n                                        <label className=\"label\">Pick your username</label>\r\n                                        <div className=\"field\">\r\n                                            <div className=\"control\">\r\n                                                <input\r\n                                                    className=\"input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"username\"\r\n                                                    placeholder=\"Username\"\r\n                                                    maxLength=\"10\"\r\n                                                    required\r\n                                                    ref={this.usernameInput}\r\n                                                />\r\n                                            </div>  \r\n                                        </div>\r\n                                        <div className=\"field\">\r\n                                            <div className=\"control\">\r\n                                                <button type=\"submit\" className=\"button is-info is-fullwidth\">\r\n                                                    Submit\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>  \r\n                                </div>                  \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UsernamePicker;","import React from 'react';\r\n\r\nclass GameList extends React.Component {    \r\n    render() {\r\n        let sessionGames;\r\n        if (this.props.gameList.length !== 0) {\r\n            sessionGames = this.props.gameList;\r\n        } else {\r\n            sessionGames = sessionStorage.getItem('gameList').split(\",\");\r\n        }\r\n        return (\r\n            <div className=\"box\">\r\n                <h1 className=\"title\">Games</h1>\r\n                <div className=\"content\">\r\n                    <div className=\"buttons\">\r\n                         {sessionGames.map((game, index) => (\r\n                            <button\r\n                                className=\"button\"\r\n                                key={index}\r\n                                onClick={() => this.props.goToGame(game)}\r\n                            >\r\n                                {game}\r\n                            </button>\r\n                        ))}\r\n                    </div>            \r\n                </div>          \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameList;","import React from 'react';\r\n\r\nclass ChatLog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.chatInput = React.createRef();\r\n    }\r\n\r\n    sendMessage = (event) => {\r\n        event.preventDefault();\r\n        this.props.sendMessage(this.chatInput.current.value);\r\n        // Clear the username input field\r\n        this.chatInput.current.value = '';\r\n    }\r\n\r\n    render() {\r\n        let userChat = (\r\n            <ul className=\"userChatLog has-text-left\">\r\n                {this.props.chatLog.map((item, index) => (\r\n                    <li key={index}>{`${item.username}: ${item.message}`}</li>\r\n                ))}    \r\n            </ul> \r\n        );\r\n\r\n        return (\r\n            <div className=\"box\">\r\n                <h1 className=\"title\">Chat</h1>\r\n                <div className=\"content\">\r\n                    {userChat}\r\n                    <div id=\"endOfChat\"></div>\r\n                </div>\r\n                <form onSubmit={this.sendMessage}>\r\n                    <div className=\"field is-grouped\">\r\n                        <p className=\"control is-expanded\">\r\n                            <input\r\n                                className=\"input\"\r\n                                type=\"text\"\r\n                                name=\"chatInput\"\r\n                                placeholder=\"Type text here\"\r\n                                autoComplete=\"off\"\r\n                                required\r\n                                ref={this.chatInput}\r\n                            />\r\n                        </p>\r\n                        <p className=\"control\">\r\n                            <button className=\"button is-info is-fullwidth\">Submit</button>\r\n                        </p>  \r\n                    </div>                       \r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatLog;","import React from 'react';\r\n\r\nclass UserList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"box\">\r\n                <h1 className=\"title\">Users</h1>\r\n                <div className=\"content\">\r\n                    <div className=\"buttons\">\r\n                        {this.props.users.map((user, index) => (\r\n                            <span className=\"button\" key={index}>{user.username}</span>\r\n                        ))} \r\n                    </div>                                      \r\n                </div>             \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserList;","import React from 'react';\r\nimport GameList from './GameList';\r\nimport ChatLog from './ChatLog';\r\nimport UserList from './UserList';\r\n\r\nclass Room extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            users: [],\r\n            chatLog: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Get all users from server\r\n        this.props.socket.emit('sendToServer', { type: 'retrieveUsers' });\r\n\r\n        this.props.socket.emit('sendToServer', { type: 'retrieveUsername' });\r\n        // Request chat log from the server\r\n        this.props.socket.emit('sendToServer', { type: 'chatLog' });\r\n\r\n        this.props.socket.on('username', (data) => this.setState({ username: data }));\r\n\r\n        this.props.socket.on('gameStarted', (data) => { this.props.history.push(`/${data}`); });\r\n        // Store chatlog from server into state\r\n        this.props.socket.on('chatLogFromServer', (data) => {this.setState({ chatLog: data })});\r\n        \r\n        // When game is over, return to room page\r\n        this.props.socket.on('gameOver', () => {\r\n            console.log('gameover');\r\n            this.props.history.push('/room');\r\n        });\r\n\r\n        // When the server disconnects, and return to login page, works for entire app\r\n        this.props.socket.on('disconnect', () => {\r\n            console.log(\"disconnected\")\r\n            this.props.socket.removeAllListeners();\r\n            this.props.history.push('/');\r\n        });\r\n\r\n        // If the server crashes and restarts, reconnect is emitted and user reconnects\r\n        this.props.socket.on('reconnect', () => {\r\n            console.log(\"reconnect\")\r\n            this.props.socket.emit('joinServer', {\r\n                username: this.props.userState.username.split(\"/\")[0],\r\n                socketId: this.props.socket.id  \r\n            });\r\n            this.props.socket.emit('sendToServer', { type: 'retrieveUsers' });\r\n        });\r\n\r\n        // gets the keys from the object returned from the server and loops through\r\n        // the array using the previously gotten keys to get the values\r\n        this.props.socket.on('userList', (data) => {\r\n            let keys = Object.keys(data);\r\n            let tempUsers = [];\r\n            let i;\r\n            for(i = 0; i < keys.length; i++) {\r\n                tempUsers.push({\r\n                    username: data[keys[i]],\r\n                    socketId: keys[i]\r\n                });\r\n            };\r\n            this.setState({ users: tempUsers });\r\n        });\r\n\r\n        this.props.socket.on('userDisconnected', (data) => {\r\n            let tempUsers = [];\r\n            let temp = this.state.users;\r\n            let i;\r\n\r\n            for(i = 0; i < this.state.users.length; i++) {\r\n                if(temp[i].socketId !== data) {\r\n                    tempUsers.push(temp[i]);\r\n                }\r\n            }         \r\n            this.setState({ users: tempUsers });\r\n        });\r\n\r\n        window.addEventListener('beforeunload', this.onPageRefresh);\r\n        \r\n        this.afterPageRefresh(sessionStorage.getItem('pageRefreshed'));\r\n    }\r\n\r\n    // Store state in local storage\r\n    onPageRefresh = () => {\r\n        sessionStorage.setItem('users', JSON.stringify(this.state.users));\r\n        sessionStorage.setItem('pageRefreshed', \"true\");\r\n    };\r\n    // Join server again after page has been refreshed and retrieve user list\r\n    afterPageRefresh = (refreshed) => {\r\n        if (refreshed === \"true\") {\r\n            console.log(\"AfterPageRefresh\");\r\n            sessionStorage.setItem('pageRefreshed', \"false\");\r\n            this.props.socket.emit('joinServer', {\r\n                username: sessionStorage.getItem('username').split(\"/\")[0],\r\n                socketId: sessionStorage.getItem('socketId')\r\n            });\r\n            this.props.socket.emit('sendToServer', { type: 'retrieveUsers' });\r\n        }\r\n    }\r\n\r\n    sendMessage = (message) => {\r\n        this.props.socket.emit('sendToServer', {\r\n            type: 'chat',\r\n            username: this.state.username,\r\n            socketId: this.props.socket.id,\r\n            message: message\r\n        });\r\n    };\r\n\r\n    goToGame = (game) => {\r\n        this.props.socket.emit('createGame', game);       \r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container\">\r\n                        <div className=\"columns is-centered\">\r\n                            <div className=\"column is-6 has-text-centered\">                             \r\n                                <GameList\r\n                                    gameList={this.props.userState.gameList}\r\n                                    goToGame={this.goToGame}\r\n                                />\r\n                                <ChatLog \r\n                                    sendMessage={this.sendMessage}\r\n                                    chatLog={this.state.chatLog}\r\n                                    username={this.state.username}\r\n                                />\r\n                                <UserList users={this.state.users} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Room;","import React from 'react';\r\n\r\nclass Double07 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allTargets: [],\r\n            showTargets: false,\r\n            showSingleTarget: false,\r\n            action: 'reload',\r\n            target: {},\r\n            player: {},\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Wait for players data from server and convert it to list of players\r\n        this.props.socket.on('state', (data) => {\r\n            // reset state to default values\r\n            this.setState({\r\n                target: {},\r\n                targetList: [],\r\n                showSingleTarget: false,\r\n                showTargets: false\r\n            }, () => {\r\n                console.log('state');\r\n                console.log(data);\r\n                let keys = Object.keys(data)\r\n                let targetList = [];\r\n                let player = {};\r\n                let i;\r\n                for(i = 0; i < keys.length; i++) {\r\n                    if(keys[i] === this.props.userState.username) {\r\n                        player = {\r\n                            username: keys[i],\r\n                            hp: data[keys[i]].hp,\r\n                            ap:  data[keys[i]].ap    \r\n                        };\r\n                    } else {\r\n                        // Remove player from targetList if hp = dead\r\n                        if (data[keys[i]].hp === \"dead\") {                          \r\n                        } else {\r\n                            targetList.push({\r\n                                username: keys[i],\r\n                                hp: data[keys[i]].hp,\r\n                                ap: data[keys[i]].ap \r\n                            });     \r\n                        }\r\n                    }\r\n                };\r\n                // Reset button to reload after attack in previous round\r\n                if (this.state.action === 'attack' && Object.keys(this.state.target).length === 0) {\r\n                    this.setState({\r\n                        action: 'reload'\r\n                    });\r\n                }\r\n\r\n                // Switch to reload action when user ap is zero\r\n                if (player.ap === 0) {\r\n                    this.setState({\r\n                        allTargets: targetList,\r\n                        player: player,\r\n                        action: 'reload'\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        allTargets: targetList,\r\n                        player: player,\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        this.props.socket.on('timerExpired', () => {\r\n            console.log('timerExpired');\r\n            // Only emit user state to server when player is alive\r\n            if (!(this.state.player.hp === \"dead\")) {\r\n                // If attack is picked but not a target, default to reload\r\n                if (this.state.action === 'attack' && Object.keys(this.state.target).length === 0) {\r\n                    this.props.socket.emit('endOfRound', {\r\n                        target: this.state.target.username,\r\n                        action: 'reload',\r\n                        player: this.state.player.username\r\n                    });\r\n                    this.setState({ action: 'reload' });\r\n                } else {\r\n                    this.props.socket.emit('endOfRound', {\r\n                        target: this.state.target.username,\r\n                        action: this.state.action,\r\n                        player: this.state.player.username\r\n                    });\r\n                }\r\n            }     \r\n        });\r\n\r\n        // Custom text is not allowed, so the string below is just used to get \r\n        // the pop up warning\r\n        window.addEventListener('beforeunload', (event) => {\r\n            sessionStorage.setItem('state', JSON.stringify(this.state));\r\n            sessionStorage.setItem('pageRefreshed', 'true');\r\n            event.returnValue = \"Refreshing the page will break things\";\r\n        });\r\n\r\n        this.afterPageRefresh(sessionStorage.getItem('pageRefreshed'));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.removeAllListeners();\r\n    }\r\n\r\n    afterPageRefresh = (refreshed) => {\r\n        if (refreshed === 'true') {\r\n            console.log('AfterPageRefresh');\r\n            sessionStorage.setItem('pageRefreshed', 'false');\r\n            let sessionState = JSON.parse(sessionStorage.getItem('state'));\r\n            this.setState(sessionState);\r\n        }\r\n    }\r\n\r\n    // Used to be able to toggle selecting a targeted player\r\n    choosePlayer = (user) => {\r\n        let i;\r\n        for(i = 0; i < this.state.allTargets.length; i++) {\r\n            if(this.state.allTargets[i].username === user) {\r\n                this.setState({\r\n                    action: 'attack',\r\n                    target: this.state.allTargets[i],\r\n                    showTargets: false,\r\n                    showSingleTarget: true\r\n                });\r\n            }\r\n        }; \r\n    }\r\n\r\n    chooseAction = (data) => {\r\n        // Update showTargets so modal of targets pops up on screen\r\n        if(data === \"attack\") {\r\n            this.setState({\r\n                // action: data, Fix server crash when round ends before target selection\r\n                showTargets: true\r\n            });\r\n        } else if (data === \"defend\" || data === \"reload\") {\r\n            // Reset target when defend or reload is selected\r\n            this.setState({\r\n                action: data,\r\n                showSingleTarget: false,\r\n                target: {}\r\n            });\r\n        }    \r\n    }\r\n\r\n    closeTargetList = () => {\r\n        this.setState({ showTargets: false });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                        <div className=\"columns is-centered\">\r\n                            <div className=\"column is-5\">\r\n                                <h1 className=\"title is-1 has-text-white\">007</h1>\r\n                                <div className={this.state.showSingleTarget ? \"box\" : \"box is-hidden\"}>\r\n                                    <h5 className=\"title is-5\">Target</h5>\r\n                                    <p>{this.state.target.username}</p>\r\n                                </div>\r\n                                <div className=\"box\">\r\n                                    <h5 className=\"title is-5\">{sessionStorage.getItem('username')}</h5>\r\n                                    <div className=\"level\">\r\n                                        <div className=\"level-item\">\r\n                                            <span className=\"button is-white\">HP: {this.state.player.hp}</span>\r\n                                            {this.state.player.hp > 0 && <span className=\"level-item\"><img src=\"/images/double07/heart.png\" alt=\"Heart\" /> </span>}\r\n                                            {this.state.player.hp > 1 && <span className=\"level-item\"><img src=\"/images/double07/heart.png\" alt=\"Heart\" /> </span>}\r\n                                            {this.state.player.hp > 2 && <span className=\"level-item\"><img src=\"/images/double07/heart.png\" alt=\"Heart\" /></span>}\r\n                                        </div>\r\n                                        <div className=\"level-item\">\r\n                                            <button className=\"button is-white\">Action Points: {this.state.player.ap}</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"box\">\r\n                                    <div className=\"buttons\">\r\n                                        <button\r\n                                            className={this.state.action === \"attack\" ? \"button is-fullwidth is-danger\" : \"button is-fullwidth is-dark\"}\r\n                                            onClick={() => this.chooseAction(\"attack\")}\r\n                                            disabled={this.state.player.ap === 0 || this.state.player.hp === \"dead\"}\r\n                                        >\r\n                                            Attack\r\n                                        </button>\r\n                                        <button\r\n                                            className={this.state.action === \"defend\" ? \"button is-fullwidth is-danger\" : \"button is-fullwidth is-dark\"}\r\n                                            onClick={() => this.chooseAction(\"defend\")}\r\n                                            disabled={this.state.player.ap === 0 || this.state.player.hp === \"dead\"}\r\n                                        >\r\n                                            Defend\r\n                                        </button>\r\n                                        <button\r\n                                            className={this.state.action === \"reload\" ? \"button is-fullwidth is-danger\" : \"button is-fullwidth is-dark\"}\r\n                                            onClick={() => this.chooseAction(\"reload\")}\r\n                                            disabled={this.state.player.ap === 0 || this.state.player.hp === \"dead\"}\r\n                                        >\r\n                                            Reload\r\n                                        </button>\r\n                                    </div> \r\n                                </div>                                                                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>  \r\n                <div className={this.state.showTargets ? \"modal is-active\" : \"modal\"}>\r\n                    <div className=\"modal-background\"></div>\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"box has-text-centered\">\r\n                            <div className=\"columns is-centered\">\r\n                                <div className=\"column is-7\">\r\n                                    <h5 className=\"title is-5\">Choose a Target</h5>\r\n                                    {this.state.allTargets.map((user, index) => (\r\n                                        <div \r\n                                            className={this.state.target.username === user.username ? \"button level is-mobile is-danger\" : \"button level is-mobile is-dark\"}\r\n                                            key={index}\r\n                                            onClick={() => this.choosePlayer(user.username)}\r\n                                        >\r\n                                            <div className=\"level-left\">\r\n                                                <div className=\"level-item\">\r\n                                                    <span>{user.username}</span>                                       \r\n                                                </div>\r\n                                                <div className=\"level-item\">\r\n                                                    <span>HP: {user.hp} </span>     \r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"level-right\">\r\n                                                {user.hp > 0 && <span className=\"level-item\"><img src=\"/images/double07/heart.png\" alt=\"Heart\" /></span>}\r\n                                                {user.hp > 1 && <span className=\"level-item\"><img src=\"/images/double07/heart.png\" alt=\"Heart\" /></span>}\r\n                                                {user.hp > 2 && <span className=\"level-item\"><img src=\"/images/double07/heart.png\" alt=\"Heart\" /></span>} \r\n                                            </div>                                           \r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>  \r\n                        </div>\r\n                    </div>\r\n                    <button className=\"modal-close is-large\" aria-label=\"close\" onClick={this.closeTargetList}></button>\r\n                </div>\r\n                    \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Double07;","import React from 'react';\r\nimport Hammer from 'hammerjs';\r\n\r\nclass Hot_Potato extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timer: 0,\r\n            potatoHolder: '',\r\n            userTurn: false,\r\n            explode: false,\r\n            handImage: '/images/hand.png'\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        // Setup swipe on swipePotato element\r\n        let stage = document.getElementById('swipePotato');\r\n        let mc = new Hammer(stage);\r\n        mc.on(\"swipe\", this.endOfTurn);\r\n\r\n        // Initialize parameters in state, start timer, and set image to potato\r\n        this.props.socket.on('state', (data) => {     \r\n            if (this.props.userState.username === data.next) {\r\n                this.setState({\r\n                    userTurn: true,\r\n                    timer: 0,\r\n                    explode: false,\r\n                    handImage: '/images/hand_with_potato.png'\r\n                 }, () => {\r\n                    this.interval = setInterval(() => this.updateTimer(), 1000);    \r\n                });                \r\n            }\r\n            this.setState({ potatoHolder: data.next });\r\n        });\r\n        // On explode, switch users, reset timer and emit endOfTurn to server\r\n        this.props.socket.on('explode', () => {\r\n            clearInterval(this.interval);\r\n            this.setState({\r\n                userTurn: false,\r\n                explode: true\r\n            });\r\n            this.props.socket.emit('endOfTurn', { \"player\": this.state.potatoHolder });\r\n        });\r\n        \r\n        // Custom text is not allowed, so the string below is just used to get \r\n        // the pop up warning\r\n        window.addEventListener('beforeunload', (event) => {\r\n            event.returnValue = \"Refreshing the page will break things\";\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.removeAllListeners();\r\n    }\r\n\r\n    updateTimer = () => {\r\n        this.setState({ timer: this.state.timer + 1 });\r\n    }\r\n\r\n    endOfTurn = () => {\r\n        // emit the person that held the potato and the time they successfully held it \r\n        if (this.state.userTurn === true) {          \r\n            this.props.socket.emit('endOfTurn', {\r\n                \"player\": this.state.potatoHolder,\r\n                \"time\": this.state.timer, \r\n            });\r\n            // Reset hand image to empty on end of users \r\n            this.setState({\r\n                userTurn: false,\r\n                handImage: '/images/hand.png'\r\n            });\r\n            clearInterval(this.interval);\r\n        }        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                        <div className=\"columns is-centered\">\r\n                            <div className=\"column is-5\">\r\n                                <h1 className=\"landing title is-1 has-text-white\">Hot Potato</h1>\r\n                                <div className={this.state.userTurn ? \"box\" : \"box is-hidden\"}>\r\n                                    <h3 className=\"title is-3\">Time Held</h3>\r\n                                    <h5 className=\"title is-5\">{this.state.timer} Seconds</h5>\r\n                                </div>\r\n                                <div className={this.state.userTurn ? \"box is-hidden\" : \"box\"}>\r\n                                    <h3 className=\"title is-3\">Player with Potato</h3>\r\n                                    <h5 className=\"title is-5\">{this.state.potatoHolder}</h5>\r\n                                </div>\r\n                                <div className=\"box\">\r\n                                    <img\r\n                                        id=\"swipePotato\" \r\n                                        src={this.state.explode === true ? \"/images/hand_with_explosion.png\" : this.state.handImage}\r\n                                        alt=\"Pass Potato\"\r\n                                    />\r\n                                    <h6 className={this.state.userTurn === true ? \"title is-6\" : \"is-hidden\"}>\r\n                                        Swipe Left or Right To Pass The Potato\r\n                                    </h6>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Hot_Potato;","import React from 'react';\r\n\r\nclass Match extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            flip: false,\r\n            playersTurn: false,\r\n            cursor: [],\r\n            board: [],\r\n            unselectableCards: [],\r\n            cardSelected: false,\r\n            cardValue: '',\r\n            disableSubmit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.on('turn', (data) => {\r\n            // if next in state is the clients username\r\n            if (data.next[0] === this.props.userState.username) {\r\n                this.setState({\r\n                    playersTurn: true,\r\n                    cursor: data.cursor,\r\n                    board: data.board\r\n                });\r\n            } else {\r\n                this.setState({ playersTurn: false });\r\n            }\r\n            // get matched cards and selected card location from gameboard\r\n            let i, j;\r\n            let temp = [];\r\n            for (i = 0; i < data.gameBoard.length; i++) {\r\n                for (j = 0; j < data.gameBoard[0].length; j++) {\r\n                    if (!(data.gameBoard[i][j] === \"XX\")) {\r\n                        temp.push([i, j]);\r\n                    }\r\n                }\r\n            }\r\n            this.setState({ unselectableCards: temp }, () => {\r\n                console.log(this.state.unselectableCards);\r\n                this.findUnselectable(data.cursor);\r\n            });           \r\n            console.log(data);\r\n        });\r\n\r\n        this.props.socket.on('flip', (data) => {\r\n            console.log('flip');\r\n            this.interval = setInterval(() => this.flipCard(), 5000);\r\n            this.setState({\r\n                flip: true,\r\n                playersTurn: false\r\n            });\r\n        });\r\n\r\n        this.props.socket.on('cursor', (data) => {\r\n            this.findUnselectable(data);\r\n            // If there is no match, than put cursor location into state\r\n            this.setState({ cursor: data });\r\n            console.log(data);\r\n        });\r\n\r\n        this.props.socket.on('timeout', (data) => {\r\n            console.log('timeout');\r\n        });\r\n\r\n        // Custom text is not allowed, so the string below is just used to get \r\n        // the pop up warning\r\n        window.addEventListener('beforeunload', (event) => {\r\n            event.returnValue = \"Refreshing the page will break things\";\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.removeAllListeners();\r\n    }\r\n\r\n    findUnselectable = (data) => {\r\n        // compare cursor location to unselectableCards location list and disable\r\n        // submit button if there is a match\r\n        let i;\r\n        for (i = 0; i < this.state.unselectableCards.length; i++) {\r\n            if (this.state.unselectableCards[i][0] === data[0] && this.state.unselectableCards[i][1] === data[1]) {\r\n                this.setState({\r\n                    disableSubmit: true,\r\n                    cursor: data\r\n                }); \r\n            }\r\n        }\r\n    }\r\n\r\n    submitDirection = (direction) => {\r\n        // Reset disableSubmit to default of false\r\n        this.setState({ disableSubmit: false }, () => {\r\n            // Emit cursor direction to server when a directional button is clicked\r\n            this.props.socket.emit(direction);      \r\n        });          \r\n    }\r\n\r\n    selectCard = () => {\r\n        this.setState({\r\n            cardValue: this.state.board[this.state.cursor[0]][this.state.cursor[1]],\r\n            cardSelected: true\r\n        });\r\n        this.props.socket.emit('select');\r\n    }\r\n\r\n    flipCard = () => {       \r\n        this.setState({ flip: false }, () => {\r\n            clearInterval(this.interval);\r\n            this.interval = setInterval(() => this.hideBox(), 1000);     \r\n        });\r\n    }\r\n\r\n    hideBox = () => {\r\n        clearInterval(this.interval);\r\n        this.setState({ cardSelected: false });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                        <div className=\"columns is-centered\">\r\n                            <div className=\"column is-4\">\r\n                                <div className={this.state.cardSelected === true ? \"box\" : \"box is-hidden\" }>\r\n                                    <div className={this.state.flip === true ? \"flip-container flip\" : \"flip-container\"}>\r\n                                        <div className=\"flipper\">\r\n                                            <div className=\"front\">\r\n                                                <img src={\"/images/match/cards/card_back.png\"} alt=\"Card Back\" />\r\n                                            </div>\r\n                                            <div className=\"back\">\r\n                                                <img\r\n                                                    src={`/images/match/cards/card_${this.state.cardValue}.png`}\r\n                                                    alt={`Card ${this.state.cardValue}`}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className={this.state.cardSelected === false ? \"box\" : \"box is-hidden\" }>\r\n                                    <h2 className=\"title is-2\">Select A Card</h2>\r\n                                </div> \r\n                                <div className=\"box\">\r\n                                    <div className=\"field is-grouped is-grouped-centered\">\r\n                                        <div className=\"control\">\r\n                                            <button className=\"button is-large noButton\" disabled></button>\r\n                                        </div>\r\n                                        <div className=\"control\">\r\n                                            <button\r\n                                                className=\"button is-info is-large\"\r\n                                                disabled={this.state.playersTurn === false}\r\n                                                onClick={() => this.submitDirection(\"up\")}\r\n                                            >\r\n                                                <img src=\"/images/match/up_chevron.png\" alt=\"UP\" />\r\n                                            </button>\r\n                                        </div>\r\n                                        <div className=\"control\">\r\n                                            <button className=\"button is-large noButton\" disabled></button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"field is-grouped is-grouped-centered\">\r\n                                        <div className=\"control\">\r\n                                            <button\r\n                                                className=\"button is-info is-large\"\r\n                                                disabled={this.state.playersTurn === false}\r\n                                                onClick={() => this.submitDirection(\"left\")}\r\n                                            >\r\n                                                <img src=\"/images/match/left_chevron.png\" alt=\"LEFT\" />\r\n                                            </button>\r\n                                        </div>\r\n                                        <div className=\"control\">\r\n                                            <button\r\n                                                className=\"button is-info is-large\"\r\n                                                disabled={this.state.playersTurn === false || this.state.disableSubmit === true}\r\n                                                onClick={this.selectCard}\r\n                                            >\r\n                                                <img src=\"/images/match/dot_and_circle.png\" alt=\"SUBMIT\" />\r\n                                            </button>\r\n                                        </div>\r\n                                        <div className=\"control\">\r\n                                            <button\r\n                                                className=\"button is-info is-large\"\r\n                                                disabled={this.state.playersTurn === false}\r\n                                                onClick={() => this.submitDirection(\"right\")}\r\n                                            >\r\n                                                <img src=\"/images/match/right_chevron.png\" alt=\"RIGHT\" />\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"field is-grouped is-grouped-centered\">\r\n                                        <div className=\"control\">\r\n                                            <button className=\"button is-large noButton\" disabled></button>\r\n                                        </div>\r\n                                        <div className=\"control\">\r\n                                            <button \r\n                                                className=\"button is-info is-large\"\r\n                                                disabled={this.state.playersTurn === false}\r\n                                                onClick={() => this.submitDirection(\"down\")}\r\n                                            >\r\n                                                <img src=\"/images/match/down_chevron.png\" alt=\"DOWN\" />\r\n                                            </button>\r\n                                        </div>\r\n                                        <div className=\"control\">\r\n                                            <button className=\"button is-large noButton\" disabled></button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>  \r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Match;","import React from 'react';\r\n\r\nclass Fragments extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fragments: [],\r\n            fragmentChosen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.on('turn', (data) => {\r\n            console.log(data);\r\n            this.setState({\r\n                fragments: data.fragments,\r\n                fragmentChosen: false\r\n            });\r\n        });\r\n\r\n        // Custom text is not allowed, so the string below is just used to get \r\n        // the pop up warning\r\n        window.addEventListener('beforeunload', (event) => {\r\n            event.returnValue = \"Refreshing the page will break things\";\r\n        });\r\n    }\r\n\r\n    selectPicture = (data) => {     \r\n        // Only submit chosen image once per turn\r\n        if (!this.state.fragmentChosen) {\r\n            console.log(data);\r\n            this.setState({ fragmentChosen: true }, () => {\r\n                this.props.socket.emit('select', {\r\n                    \"player\": this.props.userState.username,\r\n                    \"selection\": data\r\n                });    \r\n            });\r\n        }    \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                        <div className=\"columns is-1 is-variable is-mobile is-centered\">\r\n                            <div className=\"column is-one-fifth-desktop\">\r\n                                <div className=\"level\">\r\n                                    <img\r\n                                        className=\"image level-item\"\r\n                                        src={`/images/fragments/${this.state.fragments[0]}`}\r\n                                        alt=\"Fragment 1\"\r\n                                        onClick={() => this.selectPicture(this.state.fragments[0])}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"level\">\r\n                                    <img\r\n                                        className=\"image level-item\"\r\n                                        src={`/images/fragments/${this.state.fragments[3]}`}\r\n                                        alt=\"Fragment 4\"\r\n                                        onClick={() => this.selectPicture(this.state.fragments[3])}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"level\">\r\n                                    <img\r\n                                        className=\"image level-item\"\r\n                                        src={`/images/fragments/${this.state.fragments[6]}`}\r\n                                        alt=\"Fragment 7\"\r\n                                        onClick={() => this.selectPicture(this.state.fragments[6])}\r\n                                    />\r\n                                </div> \r\n                            </div>\r\n                            <div className=\"column is-one-fifth-desktop\">\r\n                                <div className=\"level\">\r\n                                    <img\r\n                                        className=\"image level-item\"\r\n                                        src={`/images/fragments/${this.state.fragments[1]}`}\r\n                                        alt=\"Fragment 2\"\r\n                                        onClick={() => this.selectPicture(this.state.fragments[1])}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"level\">\r\n                                    <img\r\n                                        className=\"image level-item\"\r\n                                        src={`/images/fragments/${this.state.fragments[4]}`}\r\n                                        alt=\"Fragment 5\"\r\n                                        onClick={() => this.selectPicture(this.state.fragments[4])}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"level\">\r\n                                    <img\r\n                                        className=\"image level-item\"\r\n                                        src={`/images/fragments/${this.state.fragments[7]}`}\r\n                                        alt=\"Fragment 8\"\r\n                                        onClick={() => this.selectPicture(this.state.fragments[7])}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column is-one-fifth-desktop\">\r\n                                <div className=\"level\">\r\n                                    <img\r\n                                        className=\"image level-item\"\r\n                                        src={`/images/fragments/${this.state.fragments[2]}`}\r\n                                        alt=\"Fragment 3\"\r\n                                        onClick={() => this.selectPicture(this.state.fragments[2])}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"level\">\r\n                                    <img\r\n                                        className=\"image level-item\"\r\n                                        src={`/images/fragments/${this.state.fragments[5]}`}\r\n                                        alt=\"Fragment 6\"\r\n                                        onClick={() => this.selectPicture(this.state.fragments[5])}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"level\">\r\n                                    <img\r\n                                        className=\"image level-item\"\r\n                                        src={`/images/fragments/${this.state.fragments[8]}`}\r\n                                        alt=\"Fragment 9\"\r\n                                        onClick={() => this.selectPicture(this.state.fragments[8])}\r\n                                    />\r\n                                </div>   \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={this.state.fragmentChosen ? \"modal is-active\" : \"modal\"}>\r\n                        <div className=\"modal-background\"></div>\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"box has-text-centered\">\r\n                                <h5 className=\"title is-5\">Fragment Chosen</h5>\r\n                            </div>     \r\n                        </div>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Fragments;","import React from 'react';\r\n\r\nclass MultiGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            valid: '',\r\n            playerHealth: '',\r\n            tapCount: 0,\r\n            simonSequence: [],\r\n            mathAnswer: 0,\r\n            activateButton: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.on('state', (data) => {\r\n            let user = this.props.userState.username;\r\n            this.setState({\r\n                name: data.name,\r\n                valid: data.valid,\r\n                playerHealth: data.players[user].hp,\r\n                tapCount: 0,\r\n                simonSequence: [],\r\n                mathAnswer: 0\r\n            });\r\n            console.log(data);\r\n            console.log(\"Player Health: \" + this.state.playerHealth);\r\n        });\r\n\r\n        this.props.socket.on('timerExpired', (data) => {\r\n            console.log('timerExpired');\r\n            let answer;\r\n            if (this.state.name === \"MultiTap\") {\r\n                answer = this.state.tapCount;\r\n            } else if (this.state.name === \"QuickMaff\") {\r\n                answer = this.state.mathAnswer;\r\n                console.log(answer);\r\n            } else {\r\n                answer = this.state.simonSequence\r\n            }\r\n            this.props.socket.emit('action', {\r\n                player: this.props.userState.username,\r\n                valid: answer \r\n            });\r\n        });\r\n        \r\n        // Custom text is not allowed, so the string below is just used to get \r\n        // the pop up warning\r\n        window.addEventListener('beforeunload', (event) => {\r\n            event.returnValue = \"Refreshing the page will break things\";\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.removeAllListeners();\r\n    }\r\n\r\n    submitTap = () => {\r\n        this.setState({ tapCount: this.state.tapCount + 1 });\r\n    }\r\n\r\n    submitSimon = (data) => {\r\n        let temp = [];\r\n        temp = this.state.simonSequence;\r\n        temp.push(data);\r\n        this.setState({ simonSequence: temp });\r\n    }\r\n\r\n    submitMaff = (data) => {\r\n        if (data === \"delete\") {\r\n            this.setState({ mathAnswer: Math.trunc(this.state.mathAnswer / 10) });       \r\n        } else if (data === \"minus\") {\r\n            this.setState({ mathAnswer: this.state.mathAnswer * -1 });\r\n        } else {\r\n            this.setState({ mathAnswer: this.state.mathAnswer * 10 + data });\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                        <div className=\"columns is-centered\">\r\n                            <div className=\"column is-5\">\r\n                                <div className={this.state.name === \"Simon\" ? \"box\" : \"box is-hidden\"}>\r\n                                    <div className=\"columns is-1 is-variable is-mobile\">\r\n                                        <div className=\"column\">\r\n                                            <div className=\"buttons\">\r\n                                                <span className=\"button is-fullwidth is-large is-success\" onClick={() => this.submitSimon(\"Green\")}>G</span>\r\n                                                <span className=\"button is-fullwidth is-large is-danger\" onClick={() => this.submitSimon(\"Red\")}>R</span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"column\">\r\n                                            <div className=\"buttons\">\r\n                                                <span className=\"button is-fullwidth is-large is-warning\" onClick={() => this.submitSimon(\"Yellow\")}>Y</span>\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitSimon(\"Blue\")}>B</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div\r\n                                    className={this.state.name === \"MultiTap\" ? \"box multiTap\" : \"box is-hidden\"}\r\n                                    onClick={this.submitTap}\r\n                                >\r\n                                    <h5 className=\"title is-5\">Tap Here</h5>\r\n                                </div>\r\n                                <div className={this.state.name === \"QuickMaff\" ? \"box\" : \"box is-hidden\"}>\r\n                                    <h4 className=\"title is-4\">QuickMaff</h4>     \r\n                                    <div className=\"field\">\r\n                                        <div className=\"control\">\r\n                                            <input\r\n                                                className=\"input is-medium\"\r\n                                                type=\"text\"\r\n                                                value={this.state.mathAnswer}\r\n                                                readOnly\r\n                                            />\r\n                                        </div>                                 \r\n                                    </div>\r\n                                    <div className=\"columns is-1 is-variable is-mobile\">\r\n                                        <div className=\"column\">\r\n                                            <div className=\"buttons\">\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitMaff(1)}>1</span>\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitMaff(4)}>4</span>\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitMaff(7)}>7</span>\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitMaff(\"minus\")}>-</span>\r\n                                            </div>     \r\n                                        </div>\r\n                                        <div className=\"column\">\r\n                                            <div className=\"buttons\">\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitMaff(2)}>2</span>\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitMaff(5)}>5</span>\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitMaff(8)}>8</span>\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitMaff(0)}>0</span>\r\n                                            </div>                          \r\n                                        </div>\r\n                                        <div className=\"column\">\r\n                                            <div className=\"buttons\">\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitMaff(3)}>3</span>\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitMaff(6)}>6</span>\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitMaff(9)}>9</span>\r\n                                                <span className=\"button is-fullwidth is-large is-info\" onClick={() => this.submitMaff(\"delete\")}>\r\n                                                    <img src=\"/images/multigame/reply.png\" alt=\"Delete\" />\r\n                                                </span>\r\n                                            </div>    \r\n                                        </div>\r\n                                    </div>                                                                \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={this.state.playerHealth === \"dead\" ? \"modal is-active\" : \"modal\"}>\r\n                        <div className=\"modal-background\"></div>\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"box has-text-centered\">\r\n                                <h5 className=\"title is-5\">You Are Dead</h5>\r\n                            </div>     \r\n                        </div>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MultiGame;","import React from 'react';\r\n\r\nclass NotFound extends React.Component {\r\n    render() {\r\n        return (\r\n            <h1>Page Not Found</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport UsernamePicker from './UsernamePicker';\r\nimport Room from './Room/Room';\r\nimport Double07 from './Games/Double07';\r\nimport HotPotato from './Games/Hot_Potato';\r\nimport Match from './Games/Match';\r\nimport Fragments from './Games/Fragments';\r\nimport MultiGame from './Games/MultiGame';\r\nimport NotFound from './NotFound';\r\nimport io from 'socket.io-client';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            socket: '',\r\n            gameList: []\r\n        };\r\n\r\n        this.socket = io();\r\n    }\r\n\r\n    updateUsername = (username) => {\r\n        this.setState({ username: username });\r\n        // Store username in a session storage\r\n        sessionStorage.setItem('username', username);\r\n    };\r\n    updateSocketId = (socketId) => {\r\n        this.setState({ socketId: socketId });\r\n        // Store socketId in a session storage\r\n        sessionStorage.setItem('socketId', socketId);\r\n    };\r\n    updateGameList = (gameList) => {\r\n        this.setState({ gameList: gameList });\r\n        // Store game list in session storage\r\n        sessionStorage.setItem('gameList', gameList);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route\r\n                        exact\r\n                        path=\"/\"\r\n                        render={(props) => <UsernamePicker {...props}\r\n                        userState={this.state}\r\n                        socket={this.socket}\r\n                        updateUsername={this.updateUsername}\r\n                        updateSocketId={this.updateSocketId}\r\n                        updateGameList={this.updateGameList}\r\n                        />} \r\n                    />\r\n                    <Route\r\n                        path=\"/room\"\r\n                        render={(props) => <Room {...props}\r\n                        userState={this.state}\r\n                        socket={this.socket}\r\n                        />}\r\n                    />\r\n                    <Route\r\n                        path=\"/Double07\" \r\n                        render={(props) => <Double07 {...props}\r\n                        userState={this.state}\r\n                        socket={this.socket}\r\n                        />}\r\n                    />\r\n                    <Route\r\n                        path=\"/Hot_Potato\"\r\n                        render={(props) => <HotPotato {...props}\r\n                        userState={this.state}\r\n                        socket={this.socket}\r\n                        />}\r\n                    />\r\n                    <Route\r\n                        path=\"/Match\"\r\n                        render={(props) => <Match {...props}\r\n                        userState={this.state}\r\n                        socket={this.socket}\r\n                        />}\r\n                    />\r\n                    <Route\r\n                        path=\"/Fragments\"\r\n                        render={(props) => <Fragments {...props}\r\n                        userState={this.state}\r\n                        socket={this.socket}\r\n                        />}\r\n                    />\r\n                    <Route\r\n                        path=\"/MultiGame\"\r\n                        render={(props) => <MultiGame {...props}\r\n                        userState={this.state}\r\n                        socket={this.socket}\r\n                        />}\r\n                    />\r\n                    <Route path=\"/\" component={NotFound} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './components/App';\r\nimport '../node_modules/bulma/css/bulma.css';\r\nimport './App.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}