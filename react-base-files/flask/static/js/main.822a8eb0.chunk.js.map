{"version":3,"sources":["serviceWorker.js","components/UsernamePicker.js","components/Room/GameList.js","components/Room/ChatLog.js","components/Room/UserList.js","components/Room/Room.js","components/Games/Double07.js","components/Games/Game2.js","components/Games/Game3.js","components/Games/Game4.js","components/Games/Game5.js","components/NotFound.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","UsernamePicker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitUsername","event","preventDefault","socket","emit","username","usernameInput","current","value","socketId","id","state","React","createRef","on","data","updateGameList","games","console","log","updateUsername","updateSocketId","localStorage","setItem","setState","history","push","react_default","a","createElement","className","onSubmit","type","name","placeholder","required","ref","Component","GameList","gameList","map","user","index","key","onClick","goToGame","ChatLog","sendMessage","chatInput","userChat","chatLog","item","concat","message","UserList","users","Room","game","_this2","i","keys","tempUsers","length","Room_GameList","userState","Room_ChatLog","Room_UserList","Double07","sendActionToServer","action","getItem","choosePlayer","allTargets","target","showTargets","showSingleTarget","chooseAction","endOfRound","player","targetList","hp","ap","Game2","src","alt","Game3","Game4","Game5","NotFound","App","io","reconnection delay","secure","max reconnection attempts","reconnection","BrowserRouter","Switch","Route","exact","path","render","components_UsernamePicker","assign","components_Room_Room","Games_Double07","component","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.822a8eb0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nclass UsernamePicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            socketId: ''    \r\n        };\r\n\r\n        this.usernameInput = React.createRef();\r\n\r\n        this.props.socket.on('games', (data) => {\r\n            this.props.updateGameList(data.games);\r\n            console.log(data.games);\r\n        });\r\n\r\n        this.props.socket.on('username', (data) => {\r\n            this.props.updateUsername(data);\r\n            this.props.updateSocketId(this.props.socket.id);\r\n            // Save username to localstorage for persistance\r\n            window.localStorage.setItem('username', data);\r\n            this.setState({\r\n                username: data,\r\n                socketId: this.props.socket.id\r\n            });\r\n\r\n            this.props.history.push(\"/room\");\r\n        });\r\n    }\r\n\r\n    // Submits user data to server and updates usernamePicker and app component state\r\n    submitUsername = (event) => {\r\n        event.preventDefault();\r\n        this.props.socket.emit('joinServer', {\r\n            username: this.usernameInput.current.value,\r\n            socketId: this.props.socket.id  \r\n        });\r\n        // Clear the username input field\r\n        this.usernameInput.current.value = '';\r\n    } \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                    <h1 className=\"landing title is-1 has-text-white\">UI Tester</h1>\r\n                    <h5 className=\"subtitle is-5 has-text-light\">Where dreams go to die</h5>\r\n                        <div className=\"columns is-centered\">\r\n                            <div className=\"column is-4\">\r\n                                <div className=\"box\">\r\n                                    <form onSubmit={this.submitUsername}>\r\n                                        <label className=\"label\">Pick your username</label>\r\n                                        <div className=\"field\">\r\n                                            <div className=\"control\">\r\n                                                <input\r\n                                                    className=\"input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"username\"\r\n                                                    placeholder=\"Username\"\r\n                                                    required\r\n                                                    ref={this.usernameInput}\r\n                                                />\r\n                                            </div>  \r\n                                        </div>\r\n                                        <div className=\"field\">\r\n                                            <div className=\"control\">\r\n                                                <button type=\"submit\" className=\"button is-info is-fullwidth\">\r\n                                                    Submit\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>  \r\n                                </div>                  \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UsernamePicker;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass GameList extends React.Component {    \r\n    render() {\r\n        return (\r\n            <div className=\"box\">\r\n                <h1 className=\"title\">Games</h1>\r\n                <div className=\"content\">\r\n                    <div className=\"buttons\">\r\n                        {this.props.gameList.map((user, index) => (\r\n                            <button\r\n                                className=\"button\"\r\n                                key={index}\r\n                                onClick={() => this.props.goToGame(user)}\r\n                            >\r\n                                {user}\r\n                            </button>\r\n                        ))}   \r\n                    </div>            \r\n                </div>          \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameList;","import React from 'react';\r\n\r\nclass ChatLog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.chatInput = React.createRef();\r\n    }\r\n\r\n    sendMessage = (event) => {\r\n        event.preventDefault();\r\n        this.props.sendMessage(this.chatInput.current.value);\r\n        // Clear the username input field\r\n        this.chatInput.current.value = '';\r\n    }\r\n\r\n    render() {\r\n        let userChat = (\r\n            <ul className=\"userChatLog\">\r\n                {this.props.chatLog.map((item, index) => (\r\n                    <li key={index}>{`${item.username}: ${item.message}`}</li>\r\n                ))}    \r\n            </ul> \r\n        );\r\n\r\n        return (\r\n            <div className=\"box\">\r\n                <h1 className=\"title\">Chat</h1>\r\n                <div className=\"content\">\r\n                    {userChat}\r\n                </div>\r\n                <form onSubmit={this.sendMessage}>\r\n                    <div className=\"field is-grouped\">\r\n                        <p className=\"control is-expanded\">\r\n                            <input\r\n                                className=\"input\"\r\n                                type=\"text\"\r\n                                name=\"chatInput\"\r\n                                placeholder=\"Type text here\"\r\n                                required\r\n                                ref={this.chatInput}\r\n                            />\r\n                        </p>\r\n                        <p className=\"control\">\r\n                            <button className=\"button is-info is-fullwidth\">Submit</button>\r\n                        </p>  \r\n                    </div>                       \r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatLog;","import React from 'react';\r\n\r\nclass UserList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"box\">\r\n                <h1 className=\"title\">Users</h1>\r\n                <div className=\"content\">\r\n                    {this.props.users.map((user, index) => (\r\n                        <p key={index}>{user.username}</p>\r\n                    ))}                    \r\n                </div>             \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserList;","import React from 'react';\r\nimport GameList from './GameList';\r\nimport ChatLog from './ChatLog';\r\nimport UserList from './UserList';\r\n\r\nclass Room extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            users: [],\r\n            chatLog: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.emit('sendToServer', { type: 'retrieveUsers' });\r\n\r\n        this.props.socket.emit('sendToServer', { type: 'retrieveUsername' });\r\n        // Get chatlog when room loads\r\n        this.props.socket.emit('sendToServer', { type: 'chatLog' });\r\n\r\n        this.props.socket.on('username', (data) => this.setState({ username: data }));\r\n\r\n        this.props.socket.on('gameStarted', (data) => {\r\n            console.log(data);\r\n            this.props.history.push(`/${data}`);\r\n        });\r\n\r\n        // gets the keys from the object returned from the server and loops through\r\n        // the array using the previously gotten keys to get the values\r\n        this.props.socket.on('userList', (data) => {\r\n            let keys = Object.keys(data)\r\n            let tempUsers = [];\r\n            let i;\r\n            for(i = 0; i < keys.length; i++) {\r\n                tempUsers.push({\r\n                    username: data[keys[i]],\r\n                    socketId: keys[i]\r\n                });\r\n            };\r\n            this.setState({ users: tempUsers });\r\n        });\r\n\r\n        this.props.socket.on('userDisconnected', (data) => {\r\n            let tempUsers = [];\r\n            this.state.users.map((user) => {\r\n                if(user.socketId !== data) {\r\n                    tempUsers.push(user);\r\n                }\r\n            });           \r\n            this.setState({ users: tempUsers });\r\n        });\r\n\r\n        this.props.socket.on('chatLogFromServer', (data) => {this.setState({ chatLog: data })});\r\n    }\r\n\r\n    sendMessage = (message) => {\r\n        this.props.socket.emit('sendToServer', {\r\n            type: 'chat',\r\n            username: this.state.username,\r\n            socketId: this.props.socket.id,\r\n            message: message\r\n        });\r\n    };\r\n\r\n    goToGame = (game) => {\r\n        this.props.socket.emit('createGame', game);\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container\">\r\n                        <div className=\"columns is-centered\">\r\n                            <div className=\"column is-6 has-text-centered\">\r\n                                <h1 className=\"title is-1 has-text-white\">Room</h1>                               \r\n                                <GameList\r\n                                    gameList={this.props.userState.gameList}\r\n                                    goToGame={this.goToGame}\r\n                                />\r\n                                <ChatLog \r\n                                    sendMessage={this.sendMessage}\r\n                                    chatLog={this.state.chatLog}\r\n                                    username={this.state.username}\r\n                                />\r\n                                <UserList users={this.state.users} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Room;","import React from 'react';\r\n\r\nclass Double07 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allTargets: [],\r\n            showTargets: false,\r\n            showSingleTarget: false,\r\n            action: '',\r\n            target: {},\r\n            player: {},\r\n        }\r\n        // Separate the entire player list into a target list and the user\r\n        this.props.socket.on('allPlayers', (data) => {\r\n            let i;\r\n            let targetList = [];\r\n            let player = {};\r\n            for(i = 0; i < data.length; i++ ) {\r\n                if(data[i].socketId !== this.props.socket.id) {\r\n                    targetList.push(data[i]);\r\n                } else {\r\n                    player = data[i];\r\n                }    \r\n            };\r\n            this.setState({ allTargets: targetList });\r\n            this.setState({ player: player });\r\n        });\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.props.socket.emit('initializePlayers');\r\n    }\r\n\r\n    sendActionToServer = (action) => {\r\n        this.socket.emit(\"sendActionToServer\", {\r\n            action: action,\r\n            username: window.localStorage.getItem('username'),\r\n            socketId: this.socket.id,\r\n            message: \"\" \r\n        });\r\n    }\r\n    // Used to be able to toggle selecting a targeted player\r\n    choosePlayer = (user) => {\r\n        let i;\r\n        for(i = 0; i < this.state.allTargets.length; i++) {\r\n            if(this.state.allTargets[i].username === user) {\r\n                this.setState({\r\n                    target: this.state.allTargets[i],\r\n                    showTargets: false,\r\n                    showSingleTarget: true\r\n                });\r\n            }\r\n        }; \r\n    }\r\n\r\n    chooseAction = (data) => {\r\n        // Update showTargets so modal of targets pops up on screen\r\n        if(data === \"attack\") {\r\n            this.setState({\r\n                action: data,\r\n                showTargets: true\r\n            });\r\n        } else if (data === \"defend\" || data === \"reload\") {\r\n            // Reset target when defend or reload is selected\r\n            this.setState({\r\n                action: data,\r\n                showSingleTarget: false,\r\n                target: {}\r\n            });\r\n        }    \r\n    }\r\n\r\n    endOfRound = (data) => {\r\n        this.socket.emit('endOfRound', {\r\n            target: this.state.target,\r\n            action: this.state.action,\r\n            user: window.localStorage.getItem('username')\r\n        });\r\n        \r\n        this.setState({\r\n            action: '',\r\n            target: ''\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                        <div className=\"columns is-centered\">\r\n                            <div className=\"column is-5\">\r\n                                <h1 className=\"title is-1 has-text-white\">007</h1>\r\n                                <div className={this.state.showSingleTarget ? \"box\" : \"box is-hidden\"}>\r\n                                    <h5 className=\"title is-5\">Target</h5>\r\n                                    <p>{this.state.target.username}</p>\r\n                                </div>\r\n                                <div className=\"box\">\r\n                                    <h5 className=\"title is-5\">{this.props.userState.username}</h5>\r\n                                    <div className=\"level is-mobile\">\r\n                                        <div className=\"level-item\">\r\n                                            <button className=\"button\">Health Points: {this.state.player.hp}</button>\r\n                                        </div>\r\n                                        <div className=\"level-item\">\r\n                                            <button className=\"button\">Action Points: {this.state.player.ap}</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"box\">\r\n                                    <div className=\"buttons\">\r\n                                        <button\r\n                                            className={this.state.action === \"attack\" ? \"button is-fullwidth is-danger\" : \"button is-fullwidth is-dark\"}\r\n                                            onClick={() => this.chooseAction(\"attack\")}>\r\n                                            Attack\r\n                                        </button>\r\n                                        <button\r\n                                            className={this.state.action === \"defend\" ? \"button is-fullwidth is-danger\" : \"button is-fullwidth is-dark\"}\r\n                                            onClick={() => this.chooseAction(\"defend\")}>\r\n                                            Defend\r\n                                        </button>\r\n                                        <button\r\n                                            className={this.state.action === \"reload\" ? \"button is-fullwidth is-danger\" : \"button is-fullwidth is-dark\"}\r\n                                            onClick={() => this.chooseAction(\"reload\")}>\r\n                                            Reload\r\n                                        </button>\r\n                                    </div> \r\n                                </div>                                                                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>  \r\n                <div className={this.state.showTargets ? \"modal is-active\" : \"modal\"}>\r\n                    <div className=\"modal-background\"></div>\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"box has-text-centered\">                                   \r\n                                <h5 className=\"title is-5\">Choose a Target</h5>\r\n                                {this.state.allTargets.map((user, index) => (\r\n                                    <div \r\n                                        className={this.state.target.username === user.username ? \"button level is-mobile is-danger\" : \"button level is-mobile is-dark\"}\r\n                                        key={index}\r\n                                        onClick={() => this.choosePlayer(user.username)}\r\n                                    >\r\n                                        <div className=\"level-item\">\r\n                                            <span>{user.username}</span>\r\n                                        </div>\r\n                                        <div className=\"level-item\">\r\n                                            <span>{user.hp} Hp</span>\r\n                                        </div>\r\n                                        <div className=\"level-item\">\r\n                                            <span>{user.ap} AP</span>  \r\n                                        </div>                                          \r\n                                    </div>\r\n                                ))} \r\n                            </div>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Double07;","import React from 'react';\r\n\r\nclass Game2 extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                        <div className=\"columns is-centered\">\r\n                            <div className=\"column is-5\">\r\n                                <h1 className=\"landing title is-1 has-text-white\">Hot Potato</h1>\r\n                                <div className=\"box\">\r\n                                    <img src=\"../../public/images/cartoon_potato.png\" alt=\"potato\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game2;","import React from 'react';\r\n\r\nclass Game3 extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                        <h1 className=\"landing title is-1 has-text-white\">Game 1</h1>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game3;","import React from 'react';\r\n\r\nclass Game4 extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                        <h1 className=\"landing title is-1 has-text-white\">Game 1</h1>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game4;","import React from 'react';\r\n\r\nclass Game5 extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                        <h1 className=\"landing title is-1 has-text-white\">Game 1</h1>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game5;","import React from 'react';\r\n\r\nclass NotFound extends React.Component {\r\n    render() {\r\n        return (\r\n            <h1>Page Not Found</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport UsernamePicker from './UsernamePicker';\nimport Room from './Room/Room';\nimport Double07 from './Games/Double07';\nimport Game2 from './Games/Game2';\nimport Game3 from './Games/Game3';\nimport Game4 from './Games/Game4';\nimport Game5 from './Games/Game5';\nimport NotFound from './NotFound';\nimport io from 'socket.io-client';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: '',\n            socket: '',\n            gameList: []\n        };\n\n        this.socket = io('http://localhost:5000', {\n            'reconnection delay': 2500,\n            'secure':true,\n            'max reconnection attempts': 10,\n            'reconnection':true       \n        });\n    }\n\n    updateUsername = (username) => {\n        this.setState({ username: username });\n    };\n    updateSocketId = (socketId) => {\n        this.setState({ socketId: socketId });\n    };\n    updateGameList = (gameList) => {\n        this.setState({ gameList: gameList });\n    };\n\n    render() {\n        return (\n            <BrowserRouter>\n                <Switch>\n                    <Route\n                        exact\n                        path=\"/\"\n                        render={(props) => <UsernamePicker {...props}\n                        userState={this.state}\n                        socket={this.socket}\n                        updateUsername={this.updateUsername}\n                        updateSocketId={this.updateSocketId}\n                        updateGameList={this.updateGameList}\n                        />} \n                    />\n                    <Route\n                        path=\"/room\"\n                        render={(props) => <Room {...props}\n                        userState={this.state}\n                        socket={this.socket}\n                        />}\n                    />\n                    <Route\n                        path=\"/Double07\" \n                        render={(props) => <Double07 {...props}\n                        userState={this.state}\n                        socket={this.socket}\n                        />}\n                    />\n                    <Route path=\"/game2\" component={Game2} />\n                    <Route path=\"/game3\" component={Game3} />\n                    <Route path=\"/game4\" component={Game4} />\n                    <Route path=\"/game5\" component={Game5} />\n                    <Route path=\"/\" component={NotFound} />\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport '../node_modules/bulma/css/bulma.css';\nimport './app.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}